# TAURUS PropertyVetâ„¢ MCP System - Production Deployment Configuration
# Kubernetes deployment for PropVet.TaurusAI.io

apiVersion: v1
kind: Namespace
metadata:
  name: propertyvet-mcp
  labels:
    app: propertyvet
    environment: production
    
---
# ConfigMap for MCP System Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: mcp-config
  namespace: propertyvet-mcp
data:
  NODE_ENV: "production"
  MCP_BRIDGE_URL: "http://mcp-bridge-service:5000"
  MCP_API_KEY: "taurus_propvet_mcp_production_key"
  DEPLOYMENT_ENVIRONMENT: "production"
  
---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: mcp-secrets
  namespace: propertyvet-mcp
type: Opaque
data:
  # Base64 encoded values
  JWT_SECRET: dGF1cnVzX3Byb3B2ZXRfc2VjcmV0X2tleV8yMDI1X3Byb2R1Y3Rpb24=
  PERPLEXITY_API_KEY: eW91cl9wZXJwbGV4aXR5X2FwaV9rZXk=
  FIRECRAWL_API_KEY: eW91cl9maXJlY3Jhd2xfYXBpX2tleQ==
  GITHUB_TOKEN: eW91cl9naXRodWJfdG9rZW4=
  DEV21_API_KEY: eW91cl9kZXYyMV9hcGlfa2V5
  SPIDERFOOT_API_KEY: eW91cl9zcGlkZXJmb290X2FwaV9rZXk=
  
---
# PropertyVet Express Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: propertyvet-backend
  namespace: propertyvet-mcp
  labels:
    app: propertyvet-backend
    tier: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: propertyvet-backend
  template:
    metadata:
      labels:
        app: propertyvet-backend
    spec:
      containers:
      - name: propertyvet-backend
        image: taurusai/propertyvet-backend:latest
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: mcp-config
              key: NODE_ENV
        - name: MCP_BRIDGE_URL
          valueFrom:
            configMapKeyRef:
              name: mcp-config
              key: MCP_BRIDGE_URL
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: mcp-secrets
              key: JWT_SECRET
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          
---
# MCP Bridge Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mcp-bridge
  namespace: propertyvet-mcp
  labels:
    app: mcp-bridge
    tier: mcp-system
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mcp-bridge
  template:
    metadata:
      labels:
        app: mcp-bridge
    spec:
      containers:
      - name: mcp-bridge
        image: taurusai/propertyvet-mcp-bridge:latest
        ports:
        - containerPort: 5000
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: mcp-config
              key: NODE_ENV
        - name: PERPLEXITY_API_KEY
          valueFrom:
            secretKeyRef:
              name: mcp-secrets
              key: PERPLEXITY_API_KEY
        - name: FIRECRAWL_API_KEY
          valueFrom:
            secretKeyRef:
              name: mcp-secrets
              key: FIRECRAWL_API_KEY
        - name: GITHUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: mcp-secrets
              key: GITHUB_TOKEN
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /api/mcp/health
            port: 5000
          initialDelaySeconds: 45
          periodSeconds: 15
        readinessProbe:
          httpGet:
            path: /api/mcp/health
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 10
          
---
# ChromeData Agent Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chromedata-agent
  namespace: propertyvet-mcp
  labels:
    app: chromedata-agent
    tier: mcp-agents
spec:
  replicas: 2
  selector:
    matchLabels:
      app: chromedata-agent
  template:
    metadata:
      labels:
        app: chromedata-agent
    spec:
      containers:
      - name: chromedata-agent
        image: taurusai/chromedata-mcp-agent:latest
        ports:
        - containerPort: 8001
        env:
        - name: AGENT_ID
          value: "chromedata_agent"
        - name: HEADLESS_CHROME
          value: "true"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
            
---
# SpiderFoot OSINT Agent Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spiderfoot-agent
  namespace: propertyvet-mcp
  labels:
    app: spiderfoot-agent
    tier: mcp-agents
spec:
  replicas: 1
  selector:
    matchLabels:
      app: spiderfoot-agent
  template:
    metadata:
      labels:
        app: spiderfoot-agent
    spec:
      containers:
      - name: spiderfoot-agent
        image: taurusai/spiderfoot-mcp-agent:latest
        ports:
        - containerPort: 8002
        env:
        - name: AGENT_ID
          value: "spiderfoot_agent"
        - name: SPIDERFOOT_API_KEY
          valueFrom:
            secretKeyRef:
              name: mcp-secrets
              key: SPIDERFOOT_API_KEY
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
            
---
# Services
apiVersion: v1
kind: Service
metadata:
  name: propertyvet-backend-service
  namespace: propertyvet-mcp
spec:
  selector:
    app: propertyvet-backend
  ports:
  - protocol: TCP
    port: 3000
    targetPort: 3000
  type: ClusterIP
  
---
apiVersion: v1
kind: Service
metadata:
  name: mcp-bridge-service
  namespace: propertyvet-mcp
spec:
  selector:
    app: mcp-bridge
  ports:
  - protocol: TCP
    port: 5000
    targetPort: 5000
  type: ClusterIP
  
---
# Ingress Configuration
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: propertyvet-ingress
  namespace: propertyvet-mcp
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
spec:
  tls:
  - hosts:
    - propvet.taurusai.io
    secretName: propertyvet-tls
  rules:
  - host: propvet.taurusai.io
    http:
      paths:
      - path: /api/mcp
        pathType: Prefix
        backend:
          service:
            name: mcp-bridge-service
            port:
              number: 5000
      - path: /
        pathType: Prefix
        backend:
          service:
            name: propertyvet-backend-service
            port:
              number: 3000
              
---
# Horizontal Pod Autoscaler for Backend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: propertyvet-backend-hpa
  namespace: propertyvet-mcp
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: propertyvet-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
        
---
# Horizontal Pod Autoscaler for MCP Bridge
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mcp-bridge-hpa
  namespace: propertyvet-mcp
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mcp-bridge
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
        
---
# Network Policy for Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: propertyvet-network-policy
  namespace: propertyvet-mcp
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: nginx-ingress
    ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 5000
  - from:
    - podSelector:
        matchLabels:
          app: propertyvet-backend
    - podSelector:
        matchLabels:
          app: mcp-bridge
    ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 5000
  egress:
  - {}
  
---
# PodDisruptionBudget for High Availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: propertyvet-backend-pdb
  namespace: propertyvet-mcp
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: propertyvet-backend
      
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mcp-bridge-pdb
  namespace: propertyvet-mcp
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: mcp-bridge